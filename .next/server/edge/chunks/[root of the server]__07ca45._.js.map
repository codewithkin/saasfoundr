{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\nimport GitHub from \"@auth/core/providers/github\"\nimport Google from \"@auth/core/providers/google\"\nimport Email from \"@auth/core/providers/email\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport const { \n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n    Email({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: process.env.EMAIL_SERVER_PORT,\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n})\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;AAOA,MAAM,SAAS,IAAI,6IAAA,CAAA,eAAY;AAExB,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE;IACX,SAAS,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAM,AAAD,EAAE;YACL,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;QACA,CAAA,GAAA,qJAAA,CAAA,UAAM,AAAD,EAAE;YACL,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;QACA,CAAA,GAAA,oJAAA,CAAA,UAAK,AAAD,EAAE;YACJ,QAAQ;gBACN,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,MAAM,QAAQ,GAAG,CAAC,iBAAiB;gBACnC,MAAM;oBACJ,MAAM,QAAQ,GAAG,CAAC,iBAAiB;oBACnC,MAAM,QAAQ,GAAG,CAAC,qBAAqB;gBACzC;YACF;YACA,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC9B;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;AACF"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { auth } from \"@/lib/auth\"\nimport { NextResponse } from \"next/server\"\nimport type { NextRequest } from \"next/server\"\n\n// List of public routes that don't require authentication\nconst publicRoutes = [\n  \"/auth/signin\",\n  \"/auth/signup\",\n  \"/auth/error\",\n  \"/auth/verify\",\n]\n\nexport default async function middleware(request: NextRequest) {\n  const session = await auth()\n\n  // Check if the route is public\n  const isPublicRoute = publicRoutes.some(route => \n    request.nextUrl.pathname.startsWith(route)\n  )\n\n  // Check if it's an API route\n  const isApiRoute = request.nextUrl.pathname.startsWith('/api')\n\n  // Allow public routes and API routes\n  if (isPublicRoute || isApiRoute) {\n    return NextResponse.next()\n  }\n\n  // If user is not logged in and trying to access protected route,\n  // redirect to sign in page\n  if (!session) {\n    const signInUrl = new URL('/auth/signin', request.url)\n    signInUrl.searchParams.set('callbackUrl', request.url)\n    return NextResponse.redirect(signInUrl)\n  }\n\n  // If user is logged in and trying to access auth pages,\n  // redirect to home page\n  if (session && isPublicRoute) {\n    return NextResponse.redirect(new URL('/', request.url))\n  }\n\n  return NextResponse.next()\n}\n\n// Configure which routes the middleware should run on\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|public/).*)\",\n  ],\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;AAGA,0DAA0D;AAC1D,MAAM,eAAe;IACnB;IACA;IACA;IACA;CACD;AAEc,eAAe,WAAW,OAAoB;IAC3D,MAAM,UAAU,MAAM,CAAA,GAAA,kHAAA,CAAA,OAAI,AAAD;IAEzB,+BAA+B;IAC/B,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QACtC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAGtC,6BAA6B;IAC7B,MAAM,aAAa,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAEvD,qCAAqC;IACrC,IAAI,iBAAiB,YAAY;QAC/B,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,iEAAiE;IACjE,2BAA2B;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,YAAY,IAAI,IAAI,gBAAgB,QAAQ,GAAG;QACrD,UAAU,YAAY,CAAC,GAAG,CAAC,eAAe,QAAQ,GAAG;QACrD,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,wDAAwD;IACxD,wBAAwB;IACxB,IAAI,WAAW,eAAe;QAC5B,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}